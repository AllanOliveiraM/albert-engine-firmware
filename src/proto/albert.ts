// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.4.2
//   protoc               v3.12.4
// source: src/proto/albert.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices'

import { Observable } from 'rxjs'

export const protobufPackage = 'albert'

export interface AlbertById {
  id: number
}

export interface Albert {
  id: number
  name: string
}

export const ALBERT_PACKAGE_NAME = 'albert'

export interface AlbertServiceClient {
  findOne(request: AlbertById): Observable<Albert>
}

export interface AlbertServiceController {
  findOne(request: AlbertById): Promise<Albert> | Observable<Albert> | Albert
}

export function AlbertServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ['findOne']
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method
      )
      GrpcMethod('AlbertService', method)(
        constructor.prototype[method],
        method,
        descriptor
      )
    }
    const grpcStreamMethods: string[] = []
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method
      )
      GrpcStreamMethod('AlbertService', method)(
        constructor.prototype[method],
        method,
        descriptor
      )
    }
  }
}

export const ALBERT_SERVICE_NAME = 'AlbertService'
